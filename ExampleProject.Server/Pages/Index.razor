@page "/"
@implements IDisposable;
@using Nethereum.UI;
@using Nethereum.Metamask;
@using Nethereum.Erc20.Blazor;
@inject IJSRuntime jsRuntime;
@inject SelectedEthereumHostProviderService selectedHostProviderService
@inject NavigationManager _navigationManager
@using Nethereum.Web3;
@using Nethereum.Hex.HexTypes;
@using Nethereum.Siwe.Core
@using Nethereum.Siwe
@using Nethereum.Signer;
@using Nethereum.RPC.Eth.DTOs;
@using Nethereum.ABI.FunctionEncoding.Attributes;
@using Nethereum.BlockchainProcessing.Processor;
@using Nethereum.Contracts;
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@using System;
@using System.Collections.Generic;
@using System.Numerics;
@using System.Threading;
@using System.Threading.Tasks;



<AuthorizeView Roles="EthereumConnected">
    <Authorized>
        <div class="card m-1">
            <div class="card-body">
                <div class="row">
                    <label class="col-sm-3 col-form-label-lg">Selected Account:</label>
                    <div class="col-sm-6">
                        @SelectedAccount
                        <small id="selectedAccountHelp" class="form-text text-muted">The selected account is bound to the host (ie Metamask) on change</small>
                    </div>
                </div>

                <div class="row">
                    <label class="col-sm-3 col-form-label-lg">Selected Account from Claims Principal</label>
                    <div class="col-sm-6">
                        @context?.User?.FindFirst(c => c.Type.Contains(ClaimTypes.NameIdentifier))?.Value
                        <small id="selectedAccountHelp" class="form-text text-muted">The selected account is bound to the claims principal</small>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <label class="col-sm-3 col-form-label-lg">Selected Network ChainId:</label>
                    <div class="col-sm-6">
                        @SelectedChainId
                        <small id="selectedAccountHelp" class="form-text text-muted">The selected chain Id</small>
                    </div>
                </div>
            </div>
        </div>

        <div class="card m-1">
            <div class="card-body">
                <div class="row">
                    <label class="col-sm-3 col-form-label-lg">Block hash of block number 0:</label>
                    <div class="col-sm-6">
                        <button @onclick="@GetBlockHashAsync">Get BlockHash</button>
                        <div>@BlockHash</div>
                        <small id="selectedAccountHelp" class="form-text text-muted">With Metamask calls are redirected to its configured node (i.e http://localhost:8545)</small>
                    </div>
                </div>
            </div>
        </div>

        <div class="card m-1">
            <div class="card-body">
                <div class="row">
                    <label class="col-sm-3 col-form-label-lg">Stablebattle sign message</label>
                    <div class="col-sm-6">
                        <button @onclick="@TryToSign">Sign</button>
                        <div>@ValidSigner</div>
                        <div>@addressRec1</div>
                        <small id="selectedAccountHelp" class="form-text text-muted">Proto auth</small>
                    </div>
                </div>
            </div>
        </div>

        <Erc20Transfer></Erc20Transfer>
    </Authorized>
    <NotAuthorized>

        <div>
            Please connect to Ethereum !
        </div>

    </NotAuthorized>
</AuthorizeView>


@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    bool EthereumAvailable { get; set; }
    string SelectedAccount { get; set; }
    int SelectedChainId { get; set; }
    string BlockHash { get; set; }
    bool ValidSigner { get; set; }
    string ErrorAuthenticateMessage { get; set; }

    //
    string addressRec1 { get; set; }

    string UserName { get; set; }
    protected string AuthenticatedAccount { get; set; }
    IEthereumHostProvider _ethereumHostProvider;

    private SiweMessageService _siweMessageService;


    [Event("KnightMinted")]
    public class KnightMintedEvent : IEventDTO
    {
        [Nethereum.ABI.FunctionEncoding.Attributes.Parameter("uint256", "item_id", 1)]
        public BigInteger ItemID { get; set; }

        [Nethereum.ABI.FunctionEncoding.Attributes.Parameter("address", "wallet", 2)]
        public string Wallet { get; set; }

        [Nethereum.ABI.FunctionEncoding.Attributes.Parameter("uint8", "kt", 3)]
        public BigInteger Type { get; set; }
    }

    protected override void OnInitialized()
    {
        _ethereumHostProvider = selectedHostProviderService.SelectedHost;
        _ethereumHostProvider.SelectedAccountChanged += HostProvider_SelectedAccountChanged;
        _ethereumHostProvider.NetworkChanged += HostProvider_NetworkChanged;
        _ethereumHostProvider.EnabledChanged += HostProviderOnEnabledChanged;
    }

    public void Dispose()
    {
        _ethereumHostProvider.SelectedAccountChanged -= HostProvider_SelectedAccountChanged;
        _ethereumHostProvider.NetworkChanged -= HostProvider_NetworkChanged;
        _ethereumHostProvider.EnabledChanged -= HostProviderOnEnabledChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstTime)
    {

        if (firstTime)
        {
            EthereumAvailable = await _ethereumHostProvider.CheckProviderAvailabilityAsync();

            if (EthereumAvailable)
            {
                SelectedAccount = await _ethereumHostProvider.GetProviderSelectedAccountAsync();
                await GetChainId();
            }

            var authState = await AuthenticationState; ;
            if (authState != null)
            {
                UserName = authState.User.FindFirst(c => c.Type.Contains(ClaimTypes.Name))?.Value;
            }
            this.StateHasChanged();
        }


    }

    private async Task HostProviderOnEnabledChanged(bool enabled)
    {
        if (enabled)
        {
            await GetChainId();
            this.StateHasChanged();
        }
    }

    private async Task GetChainId()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();
        var chainId = await web3.Eth.ChainId.SendRequestAsync();
        SelectedChainId = (int)chainId.Value;
    }

    private async Task HostProvider_SelectedAccountChanged(string account)
    {
        SelectedAccount = account;
        await GetChainId();
        this.StateHasChanged();
    }

    private async Task HostProvider_NetworkChanged(int chainId)
    {
        SelectedChainId = chainId;
        this.StateHasChanged();
    }

    protected async Task GetBlockHashAsync()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();
        var block = await web3.Eth.Blocks.GetBlockWithTransactionsByNumber.SendRequestAsync(new HexBigInteger(1));
        BlockHash = block.BlockHash;
    }

    private async Task TryToSign()
    {

        _siweMessageService = new SiweMessageService();

        var siweMessage = new SiweMessage()
        {
            Address = Web3.ToChecksumAddress(SelectedAccount),
            ChainId = SelectedChainId.ToString(),
            Uri = _navigationManager.ToAbsoluteUri("").ToString(),
            Domain = _navigationManager.ToAbsoluteUri("").Host,
            Statement = "Please sign in to authenticate to Stable",

        };

        var siweMessagestring = _siweMessageService.BuildMessageToSign(siweMessage);
        var signedMessage = await _ethereumHostProvider.SignMessageAsync(siweMessagestring);
        ValidSigner = await _siweMessageService.IsMessageSignatureValid(siweMessage, signedMessage);

        //it can be implemented in a simpler way
        var signer1 = new EthereumMessageSigner();
        addressRec1 = signer1.EncodeUTF8AndEcRecover(siweMessagestring, signedMessage);


        Console.WriteLine($"START");
        //var logs = new List<FilterLog>();

        var knightMintedEventsLogs = new List<EventLog<KnightMintedEvent>>();

        var web3 = new Web3("https://polygon-mumbai.g.alchemy.com/v2/06dAbXIkfLaTHUO5_f3OUSYsGnTqBCxH");


        //var KinightMintedEventsHandler = new EventLogProcessorHandler<KnightMintedEvent>(eventLog => knightMintedEventsLogs.Add(eventLog));

        //create our processor to retrieve the logs
        var processor = web3.Processing.Logs.CreateProcessorForContract<KnightMintedEvent>(
        "0x59586F14B1C31179f1A9aE2F4C18c5BF8bF5B6bf", log => knightMintedEventsLogs.Add(log));

        //if we need to stop the processor mid execution - call cancel on the token
        var cancellationToken = new CancellationToken();

        //crawl the required block range
        await processor.ExecuteAsync(
            toBlockNumber: new BigInteger(26845184),
            cancellationToken: cancellationToken,
            startAtBlockNumberIfNotProcessed: new BigInteger(26845100));

        Console.WriteLine($"LOG: {knightMintedEventsLogs[0]}.");



    }
}

